{"ast":null,"code":"var _jsxFileName = \"/root/tennis-frontend/src/components/RawDataViewer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Box, Typography, Paper, Button, CircularProgress, Container } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RawDataViewer = () => {\n  _s();\n  const [rawData, setRawData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(null);\n  const fetchRawData = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch('http://localhost:8000/api/tennis/raw');\n      const data = await response.json();\n      console.log('Raw data fetched successfully:', data);\n      setRawData(data);\n      setLastUpdated(new Date().toLocaleTimeString());\n      setError(null);\n    } catch (err) {\n      console.error('Error fetching raw data:', err);\n      setError(`Failed to fetch data: ${err.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchRawData();\n\n    // Set up automatic refresh every minute\n    const interval = setInterval(fetchRawData, 60000);\n\n    // Clean up interval on component unmount\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        my: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        mb: 2,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          component: \"h2\",\n          children: \"Raw Tennis Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            onClick: fetchRawData,\n            disabled: loading,\n            sx: {\n              mr: 2\n            },\n            children: \"Refresh Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this), lastUpdated && /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            component: \"span\",\n            children: [\"Last updated: \", lastUpdated]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        justifyContent: \"center\",\n        my: 4,\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(Typography, {\n        color: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this) : rawData ? /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 3,\n        sx: {\n          p: 2,\n          maxHeight: '80vh',\n          overflow: 'auto',\n          fontFamily: 'monospace'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"pre\", {\n          style: {\n            whiteSpace: 'pre-wrap'\n          },\n          children: JSON.stringify(rawData, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"No data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(RawDataViewer, \"aaie5O/j59+sRZIni+w9rwYqE3Q=\");\n_c = RawDataViewer;\nexport default RawDataViewer;\nvar _c;\n$RefreshReg$(_c, \"RawDataViewer\");","map":{"version":3,"names":["React","useState","useEffect","Box","Typography","Paper","Button","CircularProgress","Container","jsxDEV","_jsxDEV","RawDataViewer","_s","rawData","setRawData","loading","setLoading","error","setError","lastUpdated","setLastUpdated","fetchRawData","response","fetch","data","json","console","log","Date","toLocaleTimeString","err","message","interval","setInterval","clearInterval","children","sx","my","display","justifyContent","alignItems","mb","variant","component","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","mr","color","elevation","p","maxHeight","overflow","fontFamily","style","whiteSpace","JSON","stringify","_c","$RefreshReg$"],"sources":["/root/tennis-frontend/src/components/RawDataViewer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  Box, \n  Typography, \n  Paper,\n  Button,\n  CircularProgress,\n  Container\n} from '@mui/material';\n\nconst RawDataViewer = () => {\n  const [rawData, setRawData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastUpdated, setLastUpdated] = useState(null);\n\n  const fetchRawData = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch('http://localhost:8000/api/tennis/raw');\n      const data = await response.json();\n      console.log('Raw data fetched successfully:', data);\n      setRawData(data);\n      setLastUpdated(new Date().toLocaleTimeString());\n      setError(null);\n    } catch (err) {\n      console.error('Error fetching raw data:', err);\n      setError(`Failed to fetch data: ${err.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchRawData();\n    \n    // Set up automatic refresh every minute\n    const interval = setInterval(fetchRawData, 60000);\n    \n    // Clean up interval on component unmount\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <Container>\n      <Box sx={{ my: 4 }}>\n        <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n          <Typography variant=\"h5\" component=\"h2\">Raw Tennis Data</Typography>\n          <Box>\n            <Button \n              variant=\"contained\" \n              onClick={fetchRawData} \n              disabled={loading}\n              sx={{ mr: 2 }}\n            >\n              Refresh Data\n            </Button>\n            {lastUpdated && (\n              <Typography variant=\"body2\" component=\"span\">\n                Last updated: {lastUpdated}\n              </Typography>\n            )}\n          </Box>\n        </Box>\n        \n        {loading ? (\n          <Box display=\"flex\" justifyContent=\"center\" my={4}>\n            <CircularProgress />\n          </Box>\n        ) : error ? (\n          <Typography color=\"error\">{error}</Typography>\n        ) : rawData ? (\n          <Paper \n            elevation={3} \n            sx={{ \n              p: 2, \n              maxHeight: '80vh', \n              overflow: 'auto',\n              fontFamily: 'monospace'\n            }}\n          >\n            <pre style={{ whiteSpace: 'pre-wrap' }}>\n              {JSON.stringify(rawData, null, 2)}\n            </pre>\n          </Paper>\n        ) : (\n          <Typography>No data available</Typography>\n        )}\n      </Box>\n    </Container>\n  );\n};\n\nexport default RawDataViewer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}